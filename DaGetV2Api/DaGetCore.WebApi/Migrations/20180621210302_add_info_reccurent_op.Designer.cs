// <auto-generated />
using System;
using DaGetCore.Dal.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DaGetCore.WebApi.Migrations
{
    [DbContext(typeof(DaGetContext))]
    [Migration("20180621210302_add_info_reccurent_op")]
    partial class add_info_reccurent_op
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DaGetCore.Domain.BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankAccountTypeId")
                        .HasColumnName("FK_BankAccountType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnName("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateSolde")
                        .HasColumnName("DateSolde")
                        .HasColumnType("datetime");

                    b.Property<bool>("HadApplyCurrentOperationsThisMonth")
                        .HasColumnName("HadApplyCurrentOperationsThisMonth")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnName("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnName("Number")
                        .HasColumnType("nvarchar")
                        .HasMaxLength(256);

                    b.Property<decimal>("Solde")
                        .HasColumnName("Solde")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SoldeInitial")
                        .HasColumnName("SoldeInitial")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Wording")
                        .IsRequired()
                        .HasColumnName("Wording")
                        .HasColumnType("nvarchar")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("BankAccountTypeId");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("DaGetCore.Domain.BankAccountAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Wording")
                        .IsRequired()
                        .HasColumnName("Wording")
                        .HasColumnType("nvarchar")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("BankAccountAccess");
                });

            modelBuilder.Entity("DaGetCore.Domain.BankAccountOperationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankAccountId")
                        .HasColumnName("FK_BankAccount")
                        .HasColumnType("int");

                    b.Property<string>("Wording")
                        .IsRequired()
                        .HasColumnName("Wording")
                        .HasColumnType("nvarchar")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.ToTable("BankAccountOperationsTypes");
                });

            modelBuilder.Entity("DaGetCore.Domain.BankAccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Wording")
                        .IsRequired()
                        .HasColumnName("Wording")
                        .HasColumnType("nvarchar")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("BankAccountTypes");
                });

            modelBuilder.Entity("DaGetCore.Domain.DefaultOperationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Wording")
                        .IsRequired()
                        .HasColumnName("Wording")
                        .HasColumnType("nvarchar")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("DefaultOperationsTypes");
                });

            modelBuilder.Entity("DaGetCore.Domain.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("BankAccountId")
                        .HasColumnName("FK_BankAccount")
                        .HasColumnType("int");

                    b.Property<int>("BankAccountOperationTypeId")
                        .HasColumnName("FK_BankAccountOperationsType")
                        .HasColumnType("int");

                    b.Property<bool>("Closed")
                        .HasColumnName("Closed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnName("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnName("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnName("OperationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ParentOperationId")
                        .HasColumnName("FK_ParentOperation")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("BankAccountOperationTypeId");

                    b.HasIndex("ParentOperationId");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("DaGetCore.Domain.ReccurentOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("April")
                        .HasColumnName("April")
                        .HasColumnType("bit");

                    b.Property<bool>("August")
                        .HasColumnName("August")
                        .HasColumnType("bit");

                    b.Property<int>("BankAccountId")
                        .HasColumnName("FK_BankAccount")
                        .HasColumnType("int");

                    b.Property<int>("BankAccountOperationTypeId")
                        .HasColumnName("FK_BankAccountOperationsType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnName("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("December")
                        .HasColumnName("December")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EndDate")
                        .HasColumnName("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("February")
                        .HasColumnName("February")
                        .HasColumnType("bit");

                    b.Property<bool>("January")
                        .HasColumnName("January")
                        .HasColumnType("bit");

                    b.Property<bool>("July")
                        .HasColumnName("July")
                        .HasColumnType("bit");

                    b.Property<bool>("June")
                        .HasColumnName("June")
                        .HasColumnType("bit");

                    b.Property<bool>("March")
                        .HasColumnName("March")
                        .HasColumnType("bit");

                    b.Property<bool>("May")
                        .HasColumnName("May")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnName("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("November")
                        .HasColumnName("November")
                        .HasColumnType("bit");

                    b.Property<bool>("October")
                        .HasColumnName("October")
                        .HasColumnType("bit");

                    b.Property<short>("OperationDayOfMonth")
                        .HasColumnName("OperationDayOfMonth")
                        .HasColumnType("smallint");

                    b.Property<bool>("September")
                        .HasColumnName("September")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("BankAccountOperationTypeId");

                    b.ToTable("ReccurentsOperations");
                });

            modelBuilder.Entity("DaGetCore.Domain.UserBankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankAccountAccessId")
                        .HasColumnName("FK_BankAccountAccess")
                        .HasColumnType("int");

                    b.Property<int>("BankAccountId")
                        .HasColumnName("FK_BankAccount")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnName("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("UserName")
                        .HasColumnType("nvarchar")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("BankAccountAccessId");

                    b.HasIndex("BankAccountId");

                    b.ToTable("UsersBankAccounts");
                });

            modelBuilder.Entity("DaGetCore.Domain.BankAccount", b =>
                {
                    b.HasOne("DaGetCore.Domain.BankAccountType", "BankAccountType")
                        .WithMany("BankAccounts")
                        .HasForeignKey("BankAccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DaGetCore.Domain.BankAccountOperationType", b =>
                {
                    b.HasOne("DaGetCore.Domain.BankAccount", "BankAccount")
                        .WithMany("BankAccountOperationsTypes")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DaGetCore.Domain.Operation", b =>
                {
                    b.HasOne("DaGetCore.Domain.BankAccount", "BankAccount")
                        .WithMany("Operations")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DaGetCore.Domain.BankAccountOperationType", "BankAccountOperationType")
                        .WithMany("Operations")
                        .HasForeignKey("BankAccountOperationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DaGetCore.Domain.Operation", "ParentOperation")
                        .WithMany("ChildOperations")
                        .HasForeignKey("ParentOperationId");
                });

            modelBuilder.Entity("DaGetCore.Domain.ReccurentOperation", b =>
                {
                    b.HasOne("DaGetCore.Domain.BankAccount", "BankAccount")
                        .WithMany("ReccurentsOperations")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DaGetCore.Domain.BankAccountOperationType", "BankAccountOperationType")
                        .WithMany("ReccurentsOperations")
                        .HasForeignKey("BankAccountOperationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DaGetCore.Domain.UserBankAccount", b =>
                {
                    b.HasOne("DaGetCore.Domain.BankAccountAccess", "BankAccountAccess")
                        .WithMany("UsersBankAccounts")
                        .HasForeignKey("BankAccountAccessId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DaGetCore.Domain.BankAccount", "BankAccount")
                        .WithMany("UsersBankAccounts")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
